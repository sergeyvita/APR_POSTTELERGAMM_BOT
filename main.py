import os
import openai
import requests
import aiohttp
from aiohttp import web
from PIL import Image
from pydub import AudioSegment

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

openai.api_key = OPENAI_API_KEY

PROMPT = (
    "–≠—Ç–æ—Ç GPT –≤—ã—Å—Ç—É–ø–∞–µ—Ç –≤ —Ä–æ–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞ –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤. "
    "–û–Ω —Å–æ–∑–¥–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ–¥–∞—é—â–∏–µ –ø–æ—Å—Ç—ã –Ω–∞ —Ç–µ–º—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π. "
    "–ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è, —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—Ä–∞—â–µ–Ω–∏—è –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –∏–ª–∏ –ø–æ–∫—É–ø–∫–∏). "
    "GPT —É—á–∏—Ç—ã–≤–∞–µ—Ç –¥–µ–ª–æ–≤–æ–π, –Ω–æ –Ω–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–æ–Ω –∏ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –≤–æ–≤–ª–µ–∫–∞—é—â–∏–º. "
    "–ü–æ—Å—Ç—ã –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª—è—é—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏ –≤ —Å—Ç–∏–ª–µ '—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π', –¥–æ–±–∞–≤–ª—è—è –¥–∏–Ω–∞–º–∏—á–Ω–æ—Å—Ç–∏ –∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏. "
    "–ù–∞–ø—Ä–∏–º–µ—Ä: üèóÔ∏è –¥–ª—è —Ç–µ–º—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, üåü –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤, üì≤ –¥–ª—è –ø—Ä–∏–∑—ã–≤–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é. "
    "–í—Å–µ –ø–æ—Å—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —á–µ—Ç–∫–∏–µ –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏. "
    "–ï—Å–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—á–µ—Ç—ã –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º, —Ç–æ –∂–∏—Ä–Ω—ã–º –≤—ã–¥–µ–ª—è—é—Ç—Å—è –∫–æ–º–Ω–∞—Ç–Ω–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã, –ø–ª–æ—â–∞–¥—å, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ –∏–ø–æ—Ç–µ—á–Ω–æ–º—É –∫—Ä–µ–¥–∏—Ç—É. "
    "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞ –ø–æ–¥–∞—é—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –ª–æ–≥–∏—á–Ω–æ. "
    "GPT –Ω–µ —Ñ–∞–Ω—Ç–∞–∑–∏—Ä—É–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. "
    "–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –æ–Ω —É—Ç–æ—á–Ω—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è. "
    "–í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –ø–µ—Ä–µ–¥ —Ö—ç—à—Ç–µ–≥–∞–º–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ '–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤', –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ 8-800-550-23-93. "
    "–í –∫–æ–Ω—Ü–µ —Ö—ç—à—Ç–µ–≥–∏ –Ω–∞ —Ç–µ–º—É –ø–æ—Å—Ç–∞."
)

async def get_telegram_file_path(file_id):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getFile?file_id={file_id}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json()
            return data["result"]["file_path"]

async def send_message(chat_id, text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    async with aiohttp.ClientSession() as session:
        await session.post(url, json=payload)

async def send_typing_action(chat_id):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendChatAction"
    payload = {"chat_id": chat_id, "action": "typing"}
    async with aiohttp.ClientSession() as session:
        await session.post(url, json=payload)

async def transcribe_audio(ogg_file_url):
    async with aiohttp.ClientSession() as session:
        async with session.get(ogg_file_url) as resp:
            content = await resp.read()
            with open("temp_audio.ogg", "wb") as f:
                f.write(content)

    try:
        audio = AudioSegment.from_file("temp_audio.ogg", format="ogg")
        audio.export("temp_audio.wav", format="wav")
        with open("temp_audio.wav", "rb") as f:
            transcript = openai.Audio.transcribe("whisper-1", f)
        return transcript["text"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        return None

async def generate_openai_response(prompt):
    try:
        response = openai.Completion.create(
            engine="gpt-4",
            prompt=prompt,
            max_tokens=1500,
            temperature=1,
        )
        return response["choices"][0]["text"].strip()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

async def handle_webhook(request):
    try:
        data = await request.json()
        print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram: {data}")

        if "message" in data:
            chat_id = data["message"]["chat"]["id"]
            username = data["message"]["from"]["username"]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if "text" in data["message"]:
                user_message = data["message"]["text"]
                await send_typing_action(chat_id)

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if username == "di_agent01":
                    user_message += "\n\n–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp: wa.me/79281497703"
                elif username == "Alinalyusaya":
                    user_message += "\n\n–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp: wa.me/79281237003"
                elif username == "ElenaZelenskaya1":
                    user_message += "\n\n–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp: wa.me/79384242393"

                response = await generate_openai_response(PROMPT + "\n\n" + user_message)
                await send_message(chat_id, response)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            elif "voice" in data["message"]:
                file_id = data["message"]["voice"]["file_id"]
                file_path = await get_telegram_file_path(file_id)
                ogg_file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_path}"
                text_from_audio = await transcribe_audio(ogg_file_url)
                await send_typing_action(chat_id)
                response = await generate_openai_response(PROMPT + "\n\n" + text_from_audio)
                await send_message(chat_id, response)

        return web.json_response({"status": "ok"})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return web.json_response({"error": str(e)}, status=500)

async def setup_webhook():
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook"
    payload = {"url": WEBHOOK_URL}
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload) as resp:
            print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–µ–±—Ö—É–∫: {await resp.text()}")

app = web.Application()
app.router.add_post("/webhook", handle_webhook)

if __name__ == "__main__":
    web.run_app(app, port=8080)
